"""
Django settings for moviestore project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/


The settings.py file is an important file that controls our project’s settings. It contains several properties; let’s analyze some of them:
BASE_DIR: Determines where on your machine the project is situated.
SECRET_KEY: This is a secret key for a particular Django project. It is used to provide cryptographic signing and should be set to a unique, unpredictable value. In a production environment, it should be replaced with a securely generated key.
DEBUG: Our site can run in debug mode or not. In debug mode, we get detailed information on errors, which is very useful when we develop our applications. For instance, if we try to run http://localhost:8000/123 in the browser, we will see a Page not found (404) error (see Figure 2.3)
"""

from dotenv import load_dotenv
load_dotenv()  # load environment variables from .env
import os
from pathlib import Path


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# Se e https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-4a@i0*raw$n=krc3&ie2^=9#(0@seg9$d7y=pg+6(7=_z511l9'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['joelsari.pythonanywhere.com', '127.0.0.1', 'localhost']


# Application definition


#This setting specifies the list of all Django applications that are enabled for this project. Each string in the list represents the Python path to a Django application. By default, Django includes several built-in applications, such as admin, auth, contenttypes, and sessions. We will see later in this chapter how to create our own applications and how to include them in this configuration.
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'home',
    'movies',
    'accounts',
    'cart',
    "widget_tweaks",
    "moviemaps",
]

#Middleware in Django intercepts and manages the request and response processing flow. The listed middleware is provided by Django and handles various aspects of request/response processing, including security, session management, authentication, and more.
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
# Specifies the Python path to the root URL configuration for the Django project.
ROOT_URLCONF = 'moviestore.urls'


#Defines the configuration for Django’s template system. It includes information regarding the list of directories that the system should look in for template source files and other specific template settings.
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'moviestore/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
#There are some other properties in settings.py, such as DATABASES, LANGUAGE_CODE, and TIME_ZONE, but we focused on the more important properties in the preceding list. We will later revisit this file and see how relevant it is when developing our site.

WSGI_APPLICATION = 'moviestore.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

GOOGLE_MAPS_API_KEY = os.getenv("GOOGLE_MAPS_API_KEY")
MAPS_JS_API_KEY = os.getenv("MAPS_JS_API_KEY")
LANGUAGE_CODE = 'en-us' 

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

STATICFILES_DIRS = [
    BASE_DIR / 'moviestore/static/',
]
# This variable specifies the URL prefix that will be used to serve media files from the web server. In this code, it’s set to '/media/', meaning that media files uploaded to the Django application will be accessible via URLs starting with /media/. For example, if you upload an image named example.jpg, it might be accessible at a URL like http://localhost:8000/media/example.jpg.
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

MEDIA_URL = '/media/'